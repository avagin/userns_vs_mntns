Here is an example how to read files under a locked mount.

For that we need to open a directory from a target mount, which is not
overmounted. Then we make pivot_root to move all mounts in a temporary
directory. At the final step we detach all mounts from the temporary
directory.  Now we can use our file descriptor to open files, which have
been overmount before.

Here is the kernel commit:

commit 5ff9d8a65ce80efb509ce4e8051394e9ed2cd942
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 29 21:04:39 2013 -0700

    vfs: Lock in place mounts from more privileged users
    
    When creating a less privileged mount namespace or propogating mounts
    from a more privileged to a less privileged mount namespace lock the
    submounts so they may not be unmounted individually in the child mount
    namespace revealing what is under them.
    
    This enforces the reasonable expectation that it is not possible to
    see under a mount point.  Most of the time mounts are on empty
    directories and revealing that does not matter, however I have seen an
    occassionaly sloppy configuration where there were interesting things
    concealed under a mount point that probably should not be revealed.
    
    Expirable submounts are not locked because they will eventually
    unmount automatically so whatever is under them already needs
    to be safe for unprivileged users to access.
    
    From a practical standpoint these restrictions do not appear to be
    significant for unprivileged users of the mount namespace.  Recursive
    bind mounts and pivot_root continues to work, and mounts that are
    created in a mount namespace may be unmounted there.  All of which
    means that the common idiom of keeping a directory of interesting
    files and using pivot_root to throw everything else away continues to
    work just fine.
    
    Acked-by: Serge Hallyn <serge.hallyn@canonical.com>
    Acked-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

